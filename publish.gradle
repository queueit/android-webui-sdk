apply plugin: 'maven-publish'
apply plugin: 'signing'

group = groupId
version = libraryVersion

def pomConfig = {
    description libraryDescription
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
    developers {
        developer {
            name "Developers"
            email "devs@queue-it.com"
            organization organization
            organizationUrl organizationUrl
        }
    }
}

afterEvaluate {
    configurations.all {
        if (it.name =~ /DebugAll(Api|Runtime)Publication$/) {
            components.all.withVariantsFromConfiguration(it) {
                skip()
            }
        }
    }

    publishing.publications {
        android.libraryVariants.all { variant ->
            if (variant.buildType.name == "debug") return // Prevents publishing debug library

            def flavored = !variant.flavorName.isEmpty()

            /**
             * Translates "_" in flavor names to "-" for artifactIds, because "-" in flavor name is an
             * illegal character, but is well used in artifactId names.
             */
            def variantArtifactId = flavored ? variant.flavorName.replace('_', '-') : project.name
            def publicationName = "android-webui-sdk-${variant.name.capitalize()}"

            def sourceDirs = variant.sourceSets.collect {
                it.javaDirectories // Also includes kotlin sources if any.
            }
            def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
                description "Puts sources for ${variant.name} in a jar."
                from sourceDirs
                classifier = 'sources'
            }

            "$publicationName"(MavenPublication) {
                from components."${variant.flavorName}Release"
                artifactId variantArtifactId
                group groupId
                version libraryVersion
                artifact sourcesJar

                pom {
                    withXml {
                        def root = asNode()
                        root.appendNode("name", "${libraryName}:${variantArtifactId}")
                        root.appendNode("url", siteUrl)
                        root.appendNode("description", libraryDescription)
                        root.children().last() + pomConfig
                        root.dependencies.removeAll { dep ->
                            dep.scope == "test"
                        }
                        // Create a signed pom if we need it
                        def pomFile = file("${project.buildDir}/generated-${variant.flavorName}-pom.xml")
                        writeTo(pomFile)
                        signing.sign(pomFile)
                    }
                }
            }
        }
    }
}

Properties localProps = new Properties()
if (rootProject.file("local.properties").exists()) {
    localProps.load(rootProject.file("local.properties").newDataInputStream())
}

//Sign all of our publications with our PGP private key
signing {
    useInMemoryPgpKeys(PGP_KEY, PGP_PASSWORD)
    publishing.publications.all { publication ->
        sign(publication)
    }
}